How did viewing a diff between two versions of a file help you see the bug that 
was introduced?


Bugs are made when programming the new version. So by comparing two versions,
you get all the spots, where the mistakes might have appeared and you don't have to search through
the whole code.



How could having easy access to the entire history of a file make you a more 
efficient programmer in the long term?

    
It's an important routine that helps you to track progress, differenciate between parts that were programmed and provides
info on when they were coded. Also it allows for a better project management. 



What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google
docs does?


Pros: You commit in an logical order and after working on / completing one feature. You know what you have changed and can simply put that in the description. 
Cons: You might work on one feature for hours without completing or making progress. You shouldnt forget to commit anyway. 
You can directly track for how 
many hours you have been working on a project, when automatically committing after each hour.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    
In coding projects one has multiple files depending on each other with one file being able to influence the whole project.
Whereas in GDocs, one often manages all the contents in one file without external, important files.



How can you use the commands git log and git diff to view the history of files?

    
First with git log, you see the history of commits that have been saved with their IDs. Then you can use "git diff ID1 ID2"
to compare the two repositories and see what changes and how many have been made.

How might using version control make you more confident to make changes that
could break something?

    
After changing something and inserting a bug through the changes made, you can just checkout an older version, which is still bugfree
and go on from there.



Now that you have your workspace set up, what do you want to try using Git for?
I want to code an Android App with multiple people involved.

I try this to make a commit with changes and to get the new status output. YOLO