When would you want to use a remote repository rather than keeping all your work
local?
When I or multiple persons want to access the repository from multiple machines.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?
It's the same issue as we discussed earlier. Git doesnt know when it makes sense 
to make a commit or upload changes. Also, no one I work with is interested in 
code that I haven't finished yet. 

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?
Forking is for cloning a repository on the website GITHub from another user, so that in my forked repository users see
who the actual author is (not me). Cloning is done completely locally or between GITHub and my local machine. Branches 
are created when making commits that are not supposed to go with the master branch, b/c you wanna try s.th. out or
develope a new language version. After making sure that the branch works, it can be merged with the master and the new
features or languages would be added to the master branch.

What is the benefit of having a copy of the last known state of the remote
stored locally?
When cloning a new commit from GITHub, one can first check it and compare to the known one before merging.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?
If you work alone and only on one machine, there is no need for GitHub. GitHub is good for sharing with multiple
people or devices. Collaborating with multiple people through GitHub enables you to interact quickly, through
pull requests communicate intended changes in the code and makes interacting easier.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?
Changing code in a separate branch is always good for experimenting or for developing new features that are add-ons
to the master code. Working in the master makes sense when you are completely certain what you are doing and what
the output will be. When you know that you might break things, better create a branch before.
